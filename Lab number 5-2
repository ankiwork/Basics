//Библиотеки
#include <stdio.h>
#include <stdlib.h>
#include <time.h>



float * FindMax(float **a, int n, int m) {  //Поиск из условия
    
    
    
    //Объявление переменных, указателей и т.п.
    float *b[n];
    
    int i, j;  //Счётчики для прохода по матрице
    float max = 0;  //Переменная для максимального значения
    
    
    
    //Поиск максимального значения в строке
    for (i = 0; i < m; i++) {  //Проход по строкам
        
        max = 0;
        
        for (j = 0; j < n; j++) {  //Проход по левой области
            
            if (i * n > j * m) {  //Ниже диагонали
                
                if (a[i][j] > max) {
                    
                    b[i] = &a[i][j];
                    
                }
                
            }

        }
                
    }
    
    
    
    //Вернуть массив
    return  *b;
    
}



int main(int argc, const char * argv[]) {  //Главная функция
    
    
    
    //Предустановки
    srand((unsigned int)time(NULL));  //Позволяет генерировать каждый раз "Новые" случайные числа

    
    
    //Объявление переменных, указателей и т.п.
    int n = 0, m;  //Размерность матрицы "NxM", для ввода с клавиатуры
    
    float **a;  //Объявление указателя на "указатель" на строку элементов
    int i, j;  //Счётчики для прохода по матрице
    
    float *b[n];  //Массив указателей
    
    
    //Ввод размеронсти матрицы, с проверкой на корректный ввод
    printf("Введите количество строк: "); scanf("%d", &n);  //Ввод с клавиатуры кол-ва строк
        
    while (n < 1) {  //Условие на проверку размера строки
            
        if (n == 0) {  //Если равно "0"
                
            printf("Количество строк не может быть равно 0, повторите ввод: "); scanf("%d", &n);  //Ввод с клавиатуры кол-ва строк
            
        } else {  //Иначе, если отрицательное
                
            printf("Количесво строк не может быть отрицательным, повтрите ввод: "); scanf("%d", &n);  //Ввод с клавиатуры кол-ва строк
                
        }

    }
        
    printf("Введите количество столбцов: "); scanf("%d", &m);  //Ввод с клавиатуры кол-ва столбцов
        
    while (m < 1) {  //Условие на проверку размера столбца
            
        if (m == 0) {  //Если равно "0"
                
            printf("Количество столбцов не может быть равно 0, повторите ввод: "); scanf("%d", &m);  //Ввод с клавиатуры кол-ва строк
            
        } else {  //Иначе, если отрицательное
                
            printf("Количесво столбцов не может быть отрицательным, повтрите ввод: "); scanf("%d", &m);  //Ввод с клавиатуры кол-ва строк
                
        }

    }
        
    printf("\n\n");  //Отступ для красоты вывода в консоль между массивом и "Размерностью" матрицы
    
    
    
    //Обработка и заполнение матрицы
    a = (float**)malloc(n * sizeof(float*));  //Выделение памяти под указатели на строки
    
    for (i = 0; i < m; i++) {  //Проход по строкам
        
        a[i] = (float*)malloc(m * sizeof(float));  //Выделение памяти под хранение строк
        
        for (j = 0; j < n; j++) {  //Проход по левой области
            
            if (i * n < j * m) {  //Выше диагонали
                
                a[i][j] = 0.5 + rand() % 9 / 1.5;  //Присвоение элементу матрицы случайного числа
                printf("%5.1f", a[i][j]);  //Вывод элемента матрицы в консоль + 5 знакомест под элемент массива
                
            } else if (i * n == j * m) {  //Точно на диагонали, таких элементов будет всего НОД(n,m)
                
                a[i][j] = 0.5 + rand() % 9 / 1.5;  //Присвоение элементу матрицы случайного числа
                printf("%5.1f", a[i][j]);  //Вывод элемента матрицы в консоль + 5 знакомест под элемент массива
                
            } else {  //Ниже диагонали
                
                a[i][j] = 0.5 + rand() % 9 / 1.5;  //Присвоение элементу матрицы случайного числа
                printf("%5.1f", a[i][j]);  //Вывод элемента матрицы в консоль + 5 знакомест под элемент массива
                
            }

        }
    
        printf("\n\n");  //Двойной отступ для симметричности вывода в консоль относительно "столбцов"
        
    }
    
    
    //Вызов функции
    *b = FindMax(a, n, m);  //Присвоить массиву с пустыми указателями - возвращаемый массив с указателями
    
    for (i = 0; i < n; i++) {
        
        printf("%p\n", b[i]);
        
    }
    
    printf("\n");
    
    //Вернуть 0
    return 0;
    
}
