#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <fstream>
#include <string>
#include <cstring>

#define SURNAME    500
#define NAME       500
#define GROUP      500
#define MONTH      500
#define BUFFERSIZE 1000
#define STR        500
#define STRING     500

using namespace std;

ofstream fout;
ifstream fin;

struct Fio {
    char* surname;
    char* name;
    Fio() {
        surname = new char[SURNAME];
        name = new char[NAME];
    }
    ~Fio() {
        delete[] surname;
        delete[] name;
    }
};

struct Date {
    int day;
    char* month;
    int year;
    Date() {
        day = 0;
        month = new char[MONTH];
        year = 0;
    }
    ~Date() {
        delete[] month;
    }
};

struct Group {
    char* group;
    int groupnumber;
    Group() {
        group = new char[GROUP];
        groupnumber = 0;
    }
    ~Group() {
        delete[] group;
    }
};

struct Student {
    const int size = 100;
    Fio* fio = new Fio[size];
    Date* date = new Date[size];
    Group* gr = new Group[size];
};

void ClearBuffer(void) {
    fseek(stdin, 0, SEEK_END);
}

void InputString(char* dest, const char* msg) {
    cout << msg;
    ClearBuffer();
    char buff[BUFFERSIZE] = { };
    fgets(buff, BUFFERSIZE, stdin);
    strcpy_s(dest, sizeof(buff), buff);
}

void OpeningFileRecording() {
    fout.open("Students.txt", ofstream::app);
    if (!fout.is_open()) {
        cout << "Failed to open file for writing";
    }
    else {
        cout << "File successfully opened for writing\n\n";
    }
}

void ClosingFileRecording() {
    fout.close();
}

void OpeningFileRead() {
    fin.open("Students.txt", ios::in);
    if (!fin.is_open()) {
        cout << "Failed to open file for writing";
    }
    else {
        cout << "File successfully opened for writing\n\n";
    }
}

void ClosingFileRead() {
    fin.close();
}

/*string CheckingEntryByEnglish(Student* student, string check) {
    for (int i = 0; i < check.length(); i++) {
        while ((65 < check[i] && check[i] > 90) || (97 < check[i] && check[i] > 122)) {
            cout << "The string can only contain English letters, try again:";
            InputString(student->fio[i].surname, "Surname:      ");
        }
    }
    return check;
}*/

/*void CheckingEntryByCorrectDate() {

}*/

int AddingNewStudent(Student* student, int i) {
    // Открытие файла
    OpeningFileRecording();
    cout << "Student number " << i + 1 << endl;
    // Фамилия
    InputString(student->fio[i].surname, "Surname:      ");
    /*string check = student->fio[i].surname;
    check = CheckingEntryByEnglish(student, check);*/
    fout << student->fio[i].surname;
    // Имя
    InputString(student->fio[i].name, "name:         ");
    fout << student->fio[i].name;
    // День рождения
    cout << "Day:          ";
    cin >> student->date[i].day;
    //CheckingEntryByCorrectDate();
    fout << student->date[i].day << endl;
    // Месяц рождения
    InputString(student->date[i].month, "Month:        ");
    fout << student->date[i].month;
    // Год рождения
    cout << "Year:         ";
    cin >> student->date[i].year;
    //CheckingEntryByCorrectDate();
    fout << student->date[i].year << endl;
    // Группа
    InputString(student->gr[i].group, "Group:        ");
    fout << student->gr[i].group;
    // Номер группы
    cout << "Group number: ";
    cin >> student->gr[i].groupnumber;
    fout << student->gr[i].groupnumber << endl;
    // Закрытие файла + очистка консоли
    ClosingFileRecording();
    system("cls");
    i++;
    return i;
}

void OutputtingInformationTable(Student* student) {
    int number = 0;
    cout << "--------------------------" << endl;
    cout << "Enter student number: "; cin >> number;
    cout << "--------------------------" << endl;
    cout << "Surname        |" << student->fio[number - 1].surname << endl;
    cout << "Name           |" << student->fio[number - 1].name << endl;
    cout << "Day            |" << student->date[number - 1].day << endl;
    cout << "Month          |" << student->date[number - 1].month << endl;
    cout << "Year           |" << student->date[number - 1].year << endl;
    cout << "Group          |" << student->gr[number - 1].group << endl;
    cout << "Number of group|" << student->gr[number - 1].groupnumber << endl;
    cout << "--------------------------" << endl;
}

int FileDataProcessing(Student* student, int number) { 
    OpeningFileRead();
    /*
    * Проверка на пустотность файла
    */
    if (fin.peek() == EOF) { 
        return 0; 
    } 
    else {
        const int max_lenght = 1024;
        char str[max_lenght];
        for (int i = 0; i < 7; i++) {
            fin.getline(str, max_lenght);
            if (i == 0) { strncpy(student->fio[number].surname, str, SURNAME); }
            if (i == 1) { strncpy(student->fio[number].name, str, NAME); }
            if (i == 2) { student->date[number].day = atoi(str); }
            if (i == 3) { strncpy(student->date[number].month, str, MONTH); }
            if (i == 4) { student->date[number].year = atoi(str); }
            if (i == 5) { strncpy(student->gr[number].group, str, GROUP); }
            if (i == 6) { student->gr[number].groupnumber = atoi(str); }
        }
        number++;
    }
    /*
    * Запись данных в структуру
    */
    ClosingFileRead();
    return number;
}

void CheckFileCreation() {
    fout.open("Students.txt", ofstream::app);
    fout.close();
}

int WorkingWithTheUser(Student* student, int number) {
    int client = 0;
    while (client != 1) {
        cout << "Finish the operation                                        - [1]" << endl;
        cout << "Add information about a new student                         - [2]" << endl;
        cout << "Print out the information about the student in tabular form - [3]" << endl;
        cout << "Enter the transaction number: ";
        scanf_s("%d", &client);
        system("cls");
        switch (client) {
        case 1: {
            break;
        }
        case 2: {
            number = AddingNewStudent(student, number);
            break;
        }
        case 3: {
            OutputtingInformationTable(student);
            break;
        }
        }
    }
    return number;
}

int main() {
    /*
    * Инициализация структуры для 100 пользователей
    */
    const int size = 100;
    Student* student = new Student[size];
    /*
    * Проверка файла/Создание файла
    */
    CheckFileCreation();
    /*
    * Инициализация считывания данных из файла перед работой пользователя с ними
    */
    int number = 0;
    number = FileDataProcessing(student, number);
    /*
    * Инициализация работы пользователя с данными структуры
    */
    number = WorkingWithTheUser(student, number);
}
