#include <iostream>

using namespace std;

template <typename T>
class Student {
public:
	Student();
	~Student();
	void push_back(T data);
private:
	template <typename T>
	class Node {
	public:
		Node* pNext;
		T data;
		Node(T data = T(), Node* pNext = nullptr) {
			this->data = data;
			this->pNext = pNext;
		}
	};
	int size;
	Node<T>* head;
};

template <typename T>
Student<T>::Student() {
	size = 0;
	head = nullptr;
}

template <typename T>
Student<T>::~Student() {

}

template<typename T>
void Student<T>::push_back(T data) {
	if (head == nullptr) {
		head = new Node<T>(data);
	} 
	else {
		Node<T>* current = this->head;
		while (current->pNext != nullptr) {
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);
	}
}

int main() {
	Student<int> stud;
	stud.push_back(5);
	return 0;
}
